import java.nio.file.FileVisitResult

import static groovy.io.FileType.DIRECTORIES

enum TargetPlatform {
    WINDOWS( 'windows', 'openjdk-11_windows-x64_bin.zip' ),
    LINUX( 'linux', 'openjdk-11_linux-x64_bin.tar.gz' ),
    MAC( 'mac', 'openjdk-11_osx-x64_bin.tar.gz' ),
    GENERIC( 'generic', '' )

    final String platform

    final String jdkPackageFile

    TargetPlatform( String value, String jdkPackageFile )
    {
        this.platform = value
        this.jdkPackageFile = jdkPackageFile
    }

    String toString()
    {
        return this.platform
    }

    static TargetPlatform from( String value )
    {
        value = value == null ? '' : value.toLowerCase()

        if ( value.startsWith( 'windows' ) )
        {
            return WINDOWS
        }
        else if ( value.startsWith( 'linux' ) )
        {
            return LINUX
        }
        else if ( value.startsWith( 'mac' ) )
        {
            return MAC
        }
        else
        {
            return GENERIC
        }
    }
}

// Pass command line parameter to specify build target platform. E.g.: gradlew build -Pplatform=mac
def getPlatform()
{
    if ( ext.jdkPlatform != null )
    {
        return ext.jdkPlatform
    }

    def paramJdkPlatform = project.findProperty( 'platform' )
    if ( paramJdkPlatform == 'current' )
    {
        ext.jdkPlatform = TargetPlatform.from( System.getProperty( 'os.name' ) )
        println "Build target platform: ${ext.jdkPlatform}"
    }
    else if ( project.hasProperty( 'platform' ) )
    {
        ext.jdkPlatform = TargetPlatform.from( paramJdkPlatform as String )
        if ( ext.jdkPlatform == TargetPlatform.GENERIC )
        {
            throw new GradleException( 'Build target platform not supported: ' + paramJdkPlatform, null )
        }
        println "Build target platform: ${ext.jdkPlatform}"
    }
    else
    {
        ext.jdkPlatform = TargetPlatform.GENERIC
    }

    return ext.jdkPlatform
}

def getJdkPackageFile()
{
    return this.getPlatform().jdkPackageFile
}

def isWindowsBuild()
{
    return getPlatform() == TargetPlatform.WINDOWS
}

def isLinuxBuild()
{
    return getPlatform() == TargetPlatform.LINUX
}

def isMacBuild()
{
    return getPlatform() == TargetPlatform.MAC
}

def isGenericBuild()
{
    return getPlatform() == TargetPlatform.GENERIC
}

def findJdkHome( File f )
{
    def binDir = null
    f.traverse( type: DIRECTORIES, nameFilter: ~/bin/ ) {
        binDir = it
        return FileVisitResult.TERMINATE
    }
    if ( binDir == null )
    {
        throw new GradleException( 'Could not find JDK home directory in ' + f.absolutePath, null )
    }
    return binDir.getParentFile()
}

// List of JDK build URLs from http://jdk.java.net/11/
def getJdkDownloadUrl()
{
    def JdkBaseUrl = 'https://download.java.net/java/ga/jdk11/'
    return JdkBaseUrl + getJdkPackageFile()
}

ext {
    jdkPlatform = null
    getPlatform = this.&getPlatform
    getJdkPackageFile = this.&getJdkPackageFile
    getJdkDownloadUrl = this.&getJdkDownloadUrl
    isWindowsBuild = this.&isWindowsBuild
    isLinuxBuild = this.&isLinuxBuild
    isMacBuild = this.&isMacBuild
    isGenericBuild = this.&isGenericBuild
    findJdkHome = this.&findJdkHome
}