plugins {
    id 'maven'
    id 'com.enonic.defaults' version '1.0.3'
    id 'de.undercouch.download' version '3.4.3'
    // id 'com.bmuschko.docker-remote-api' version '3.1.0'
}

apply from: 'jdk.gradle'

configurations {
    app
    distro
}

configurations.all {
    resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
}

dependencies {
    app "${group}:app-main:${vMainApp}@jar"
    app "${group}:app-standardidprovider:${vStdIdProvider}@jar"
    app "${group}:app-applications:${vApplicationsApp}@jar"
    app "${group}:app-contentstudio:${vContentStudioApp}@jar"
    app "${group}:app-users:${vUsersApp}@jar"
    distro( "${group}:runtime:${vXpRuntime}@zip" )
}

ext {
    installDir = "$buildDir/install"
    archiveBase = "enonic-xp-$version"
    appLevel = 40
    downloadDir = "$buildDir/download"
}

task downloadJdk( type: Download ) {
    description = 'Download JDK.'
    group = 'Dist'

    onlyIf {
        !isGenericBuild()
    }

    dest "$downloadDir/"
    overwrite false
    onlyIfModified true

    src getJdkDownloadUrl()

    doFirst {
        mkdir dest
    }

    doLast {
        tasks.unpackJdk.configure {
            def jdkPackageFile = getJdkPackageFile()
            if ( jdkPackageFile.endsWith( '.zip' ) )
            {
                def zipFile = file( "$downloadDir/$jdkPackageFile" )
                from zipTree( zipFile )
            }
            else if ( jdkPackageFile.endsWith( '.tar.gz' ) )
            {
                def tarFile = resources.gzip( file( "$downloadDir/$jdkPackageFile" ) )
                from tarTree( tarFile )
            }
            else
            {
                throw new GradleException( "Unable to unpack JDK: $jdkPackageFile" )
            }
        }
    }
}

task unpackJdk( type: Copy, dependsOn: downloadJdk ) {
    description = 'Unpack JDK.'
    group = 'Dist'

    onlyIf {
        !isGenericBuild()
    }

    doFirst {
        delete file( "$installDir/jdk/" ).listFiles()
    }

    def outputDir = file( "$installDir/jdk/" )
    into outputDir
}

task jdk( dependsOn: unpackJdk ) {
    description = 'Add JDK to distribution.'
    group = 'Dist'

    onlyIf {
        !isGenericBuild()
    }

    doLast {
        def targetDir = "$installDir/jdk/"
        def jdkDirTempFiles = file( targetDir ).listFiles()
        def jdkHome = findJdkHome( file( targetDir ) )

        jdkHome.traverse( [maxDepth: 0] ) {
            ant.move file: it, todir: targetDir
        }

        jdkDirTempFiles.each { File file -> delete( file )
        }
    }
}

task unpackDistro( type: Copy ) {
    from {
        configurations.distro.collect { zipTree( it ) }
    }
    into installDir
}

task copyResources( type: Copy, dependsOn: unpackDistro ) {
    destinationDir = file( installDir )
    from( 'src' )

    if ( isGenericBuild() )
    {
        exclude 'bin/setenv.bat'
        exclude 'bin/setenv.sh'
    }
}

task copyApps( type: Copy, dependsOn: copyResources ) {
    from( configurations.app )
    into "$installDir/system/$appLevel"
}

task copyDist( dependsOn: copyApps )

task distZip( type: Zip, dependsOn: [copyDist, jdk] ) {
    description = 'Build full distribution zip.'
    group = 'Dist'
    baseName = isGenericBuild() ? 'distro' : ( 'distro-' + getPlatform() )
    from installDir
    into archiveBase
}

artifacts {
    archives distZip
}
